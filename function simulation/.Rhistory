dat[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
dat[[m]]$k=k;
dat[[m]]$x = (dat[[m]]$x)
# /8*0.01
}
save.image("simudata.RData")
# load("simudata.RData")
plot.mixgaussian(dat,step=2,K=K)
plot.mixgaussian(dat,step=2,K=K,make.pdf=TRUE)
# write to file
stepsize = length(x)
tsize = stepsize
# for(k in 1:3)
for(m in 1:M)
{
xtoltrain = 1:stepsize
xindtrain = sample(1:stepsize,size = tsize,replace = FALSE)
xindtrain = sort(xindtrain)
xresttrain = xtoltrain[-xindtrain]
sink('../demo/traindata.dat',append = TRUE)
cat(dat[[m]]$x[xindtrain],"\n")
cat(round(dat[[m]]$y[xindtrain],digits=4),"\n")
sink()
sink('../demo/testdata.dat',append = TRUE)
cat(dat[[m]]$x[xresttrain],"\n")
cat(round(dat[[m]]$y[xresttrain],digits=4),"\n")
sink()
}
# sink()
save.image("simudata.RData")
# load("simudata.RData")
# plot.mixgaussian(dat,step=2)
# plot.mixgaussian(dat,step=2,make.pdf=TRUE)
#
# for(i in 1:19) cat(i,'th',these[[i]],'\n')
rm(list = ls())
library('MCMCpack')
# setwd('/home/zheqng/function simulat')
setwd('/home/zheqng/src/my-RJMCMC-matlab/large K/function simulation/')
these = read.table(file='/home/zheqng/src/my-RJMCMC-matlab/large K/function simulation/theta.txt')
# setwd('/media/zheqng/Seagate Backup Plus Drive/zheqng@nwu/src/RJMCMC-my-C/simu1/2019.2.10/function simulation/')
library("MASS")
source('basicfunc.r')
source('plot.mix.r')
K=7
theta = vector("list",K)
# for(k in 1:100){
PI  = rep(1/K,1,K);
for(k in 1:K){
theta[[k]]$w=these[k,1]
theta[[k]]$v=these[k,2]
theta[[k]]$sigma2=these[k,3]
theta[[k]]$pi = PI[k]
}
# label = rmultinom(n=1,size=M,prob=PI)
z=NULL
for(k in 1:K)z =c(z, rep(k,2))
M = K*2
dat =vector( "list", M)
x=seq(from=-4,to=4,length.out = 50)
for(i in 1:M)
dat[[i]]$x = x;
dat$M=M
# curves.left=seq(1,M,by=1)
# z=rep(0,1,M)
# for(k in 1:K){
#   curves.choose=sample(curves.left,label[k])
#   z[curves.choose]=k
#   curves.left = curves.left[-pmatch(curves.choose,curves.left)]
# }
for(m in 1:M)
{
k=z[m]
dat[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
dat[[m]]$k=k;
dat[[m]]$x = (dat[[m]]$x)
# /8*0.01
}
save.image("simudata.RData")
# load("simudata.RData")
plot.mixgaussian(dat,step=2,K=K)
plot.mixgaussian(dat,step=2,K=K,make.pdf=TRUE)
# write to file
stepsize = length(x)
tsize = stepsize
# for(k in 1:3)
for(m in 1:M)
{
xtoltrain = 1:stepsize
xindtrain = sample(1:stepsize,size = tsize,replace = FALSE)
xindtrain = sort(xindtrain)
xresttrain = xtoltrain[-xindtrain]
sink('../demo/traindata.dat',append = TRUE)
cat(dat[[m]]$x[xindtrain],"\n")
cat(round(dat[[m]]$y[xindtrain],digits=4),"\n")
sink()
sink('../demo/testdata.dat',append = TRUE)
cat(dat[[m]]$x[xresttrain],"\n")
cat(round(dat[[m]]$y[xresttrain],digits=4),"\n")
sink()
}
# sink()
save.image("simudata.RData")
# load("simudata.RData")
# plot.mixgaussian(dat,step=2)
# plot.mixgaussian(dat,step=2,make.pdf=TRUE)
#
# for(i in 1:19) cat(i,'th',these[[i]],'\n')
rm(list = ls())
library('MCMCpack')
# setwd('/home/zheqng/function simulat')
setwd('/home/zheqng/src/my-RJMCMC-matlab/large K/function simulation/')
these = read.table(file='/home/zheqng/src/my-RJMCMC-matlab/large K/function simulation/theta.txt')
# setwd('/media/zheqng/Seagate Backup Plus Drive/zheqng@nwu/src/RJMCMC-my-C/simu1/2019.2.10/function simulation/')
library("MASS")
source('basicfunc.r')
source('plot.mix.r')
K=7
theta = vector("list",K)
# for(k in 1:100){
PI  = rep(1/K,1,K);
for(k in 1:K){
theta[[k]]$w=these[k,1]
theta[[k]]$v=these[k,2]
theta[[k]]$sigma2=these[k,3]
theta[[k]]$pi = PI[k]
}
# label = rmultinom(n=1,size=M,prob=PI)
z=NULL
for(k in 1:K)z =c(z, rep(k,2))
M = K*2
dat =vector( "list", M)
x=seq(from=-4,to=4,length.out = 50)
for(i in 1:M)
dat[[i]]$x = x;
dat$M=M
# curves.left=seq(1,M,by=1)
# z=rep(0,1,M)
# for(k in 1:K){
#   curves.choose=sample(curves.left,label[k])
#   z[curves.choose]=k
#   curves.left = curves.left[-pmatch(curves.choose,curves.left)]
# }
for(m in 1:M)
{
k=z[m]
dat[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
dat[[m]]$k=k;
dat[[m]]$x = (dat[[m]]$x)
# /8*0.01
}
save.image("simudata.RData")
# load("simudata.RData")
plot.mixgaussian(dat,step=2,K=K)
plot.mixgaussian(dat,step=2,K=K,make.pdf=TRUE)
# write to file
stepsize = length(x)
tsize = stepsize
# for(k in 1:3)
for(m in 1:M)
{
xtoltrain = 1:stepsize
xindtrain = sample(1:stepsize,size = tsize,replace = FALSE)
xindtrain = sort(xindtrain)
xresttrain = xtoltrain[-xindtrain]
sink('../demo/traindata.dat',append = TRUE)
cat(dat[[m]]$x[xindtrain],"\n")
cat(round(dat[[m]]$y[xindtrain],digits=4),"\n")
sink()
sink('../demo/testdata.dat',append = TRUE)
cat(dat[[m]]$x[xresttrain],"\n")
cat(round(dat[[m]]$y[xresttrain],digits=4),"\n")
sink()
}
# sink()
save.image("simudata.RData")
# load("simudata.RData")
# plot.mixgaussian(dat,step=2)
# plot.mixgaussian(dat,step=2,make.pdf=TRUE)
#
# for(i in 1:19) cat(i,'th',these[[i]],'\n')
rm(list = ls())
library('MCMCpack')
# setwd('/home/zheqng/function simulat')
setwd('/home/zheqng/src/my-RJMCMC-matlab/large K/function simulation/')
these = read.table(file='/home/zheqng/src/my-RJMCMC-matlab/large K/function simulation/theta.txt')
# setwd('/media/zheqng/Seagate Backup Plus Drive/zheqng@nwu/src/RJMCMC-my-C/simu1/2019.2.10/function simulation/')
library("MASS")
source('basicfunc.r')
source('plot.mix.r')
K=7
theta = vector("list",K)
# for(k in 1:100){
PI  = rep(1/K,1,K);
for(k in 1:K){
theta[[k]]$w=these[k,1]
theta[[k]]$v=these[k,2]
theta[[k]]$sigma2=these[k,3]
theta[[k]]$pi = PI[k]
}
# label = rmultinom(n=1,size=M,prob=PI)
z=NULL
for(k in 1:K)z =c(z, rep(k,2))
M = K*2
dat =vector( "list", M)
x=seq(from=-4,to=4,length.out = 50)
for(i in 1:M)
dat[[i]]$x = x;
dat$M=M
# curves.left=seq(1,M,by=1)
# z=rep(0,1,M)
# for(k in 1:K){
#   curves.choose=sample(curves.left,label[k])
#   z[curves.choose]=k
#   curves.left = curves.left[-pmatch(curves.choose,curves.left)]
# }
for(m in 1:M)
{
k=z[m]
dat[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
dat[[m]]$k=k;
dat[[m]]$x = (dat[[m]]$x)
# /8*0.01
}
save.image("simudata.RData")
# load("simudata.RData")
plot.mixgaussian(dat,step=2,K=K)
plot.mixgaussian(dat,step=2,K=K,make.pdf=TRUE)
# write to file
stepsize = length(x)
tsize = stepsize
# for(k in 1:3)
for(m in 1:M)
{
xtoltrain = 1:stepsize
xindtrain = sample(1:stepsize,size = tsize,replace = FALSE)
xindtrain = sort(xindtrain)
xresttrain = xtoltrain[-xindtrain]
sink('../demo/traindata.dat',append = TRUE)
cat(dat[[m]]$x[xindtrain],"\n")
cat(round(dat[[m]]$y[xindtrain],digits=4),"\n")
sink()
sink('../demo/testdata.dat',append = TRUE)
cat(dat[[m]]$x[xresttrain],"\n")
cat(round(dat[[m]]$y[xresttrain],digits=4),"\n")
sink()
}
# sink()
save.image("simudata.RData")
# load("simudata.RData")
# plot.mixgaussian(dat,step=2)
# plot.mixgaussian(dat,step=2,make.pdf=TRUE)
#
# for(i in 1:19) cat(i,'th',these[[i]],'\n')
rm(list = ls())
library('MCMCpack')
# setwd('/home/zheqng/function simulat')
setwd('/home/zheqng/src/my-RJMCMC-matlab/large K/function simulation/')
these = read.table(file='/home/zheqng/src/my-RJMCMC-matlab/large K/function simulation/theta.txt')
# setwd('/media/zheqng/Seagate Backup Plus Drive/zheqng@nwu/src/RJMCMC-my-C/simu1/2019.2.10/function simulation/')
library("MASS")
source('basicfunc.r')
source('plot.mix.r')
K=7
theta = vector("list",K)
# for(k in 1:100){
PI  = rep(1/K,1,K);
for(k in 1:K){
theta[[k]]$w=these[k,1]
theta[[k]]$v=these[k,2]
theta[[k]]$sigma2=these[k,3]
theta[[k]]$pi = PI[k]
}
# label = rmultinom(n=1,size=M,prob=PI)
z=NULL
for(k in 1:K)z =c(z, rep(k,2))
M = K*4
dat =vector( "list", M)
x=seq(from=-4,to=4,length.out = 50)
for(i in 1:M)
dat[[i]]$x = x;
dat$M=M
# curves.left=seq(1,M,by=1)
# z=rep(0,1,M)
# for(k in 1:K){
#   curves.choose=sample(curves.left,label[k])
#   z[curves.choose]=k
#   curves.left = curves.left[-pmatch(curves.choose,curves.left)]
# }
for(m in 1:M)
{
k=z[m]
dat[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
dat[[m]]$k=k;
dat[[m]]$x = (dat[[m]]$x)
# /8*0.01
}
save.image("simudata.RData")
# load("simudata.RData")
plot.mixgaussian(dat,step=2,K=K)
plot.mixgaussian(dat,step=2,K=K,make.pdf=TRUE)
# write to file
stepsize = length(x)
tsize = stepsize
# for(k in 1:3)
for(m in 1:M)
{
xtoltrain = 1:stepsize
xindtrain = sample(1:stepsize,size = tsize,replace = FALSE)
xindtrain = sort(xindtrain)
xresttrain = xtoltrain[-xindtrain]
sink('../demo/traindata.dat',append = TRUE)
cat(dat[[m]]$x[xindtrain],"\n")
cat(round(dat[[m]]$y[xindtrain],digits=4),"\n")
sink()
sink('../demo/testdata.dat',append = TRUE)
cat(dat[[m]]$x[xresttrain],"\n")
cat(round(dat[[m]]$y[xresttrain],digits=4),"\n")
sink()
}
# sink()
save.image("simudata.RData")
# load("simudata.RData")
# plot.mixgaussian(dat,step=2)
# plot.mixgaussian(dat,step=2,make.pdf=TRUE)
#
# for(i in 1:19) cat(i,'th',these[[i]],'\n')
rm(list = ls())
library('MCMCpack')
# setwd('/home/zheqng/function simulat')
setwd('/home/zheqng/src/my-RJMCMC-matlab/large K/function simulation/')
these = read.table(file='/home/zheqng/src/my-RJMCMC-matlab/large K/function simulation/theta.txt')
# setwd('/media/zheqng/Seagate Backup Plus Drive/zheqng@nwu/src/RJMCMC-my-C/simu1/2019.2.10/function simulation/')
library("MASS")
source('basicfunc.r')
source('plot.mix.r')
K=7
theta = vector("list",K)
# for(k in 1:100){
PI  = rep(1/K,1,K);
for(k in 1:K){
theta[[k]]$w=these[k,1]
theta[[k]]$v=these[k,2]
theta[[k]]$sigma2=these[k,3]
theta[[k]]$pi = PI[k]
}
# label = rmultinom(n=1,size=M,prob=PI)
z=NULL
for(k in 1:K)z =c(z, rep(k,2))
M = K*4
dat =vector( "list", M)
x=seq(from=-4,to=4,length.out = 50)
for(i in 1:M)
dat[[i]]$x = x;
dat$M=M
# curves.left=seq(1,M,by=1)
# z=rep(0,1,M)
# for(k in 1:K){
#   curves.choose=sample(curves.left,label[k])
#   z[curves.choose]=k
#   curves.left = curves.left[-pmatch(curves.choose,curves.left)]
# }
for(m in 1:M)
{
k=z[m]
dat[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
dat[[m]]$k=k;
dat[[m]]$x = (dat[[m]]$x)
# /8*0.01
}
save.image("simudata.RData")
# load("simudata.RData")
plot.mixgaussian(dat,step=2,K=K)
plot.mixgaussian(dat,step=2,K=K,make.pdf=TRUE)
# write to file
stepsize = length(x)
tsize = stepsize
# for(k in 1:3)
for(m in 1:M)
{
xtoltrain = 1:stepsize
xindtrain = sample(1:stepsize,size = tsize,replace = FALSE)
xindtrain = sort(xindtrain)
xresttrain = xtoltrain[-xindtrain]
sink('../demo/traindata.dat',append = TRUE)
cat(dat[[m]]$x[xindtrain],"\n")
cat(round(dat[[m]]$y[xindtrain],digits=4),"\n")
sink()
sink('../demo/testdata.dat',append = TRUE)
cat(dat[[m]]$x[xresttrain],"\n")
cat(round(dat[[m]]$y[xresttrain],digits=4),"\n")
sink()
}
# sink()
save.image("simudata.RData")
# load("simudata.RData")
# plot.mixgaussian(dat,step=2)
# plot.mixgaussian(dat,step=2,make.pdf=TRUE)
#
# for(i in 1:19) cat(i,'th',these[[i]],'\n')
install.packages("MCMCpack")
install.packages("MatrixModels")
install.packages("~/桌面/MatrixModels_0.4-1.tar.gz", repos = NULL, type = "source")
install.packages(c("assertthat", "BH", "cli", "colorspace", "digest", "fansi", "fda.usc", "ggplot2", "glue", "gtable", "lazyeval", "pillar", "polynom", "R6", "Rcpp", "RcppEigen", "rlang", "rstan", "seewave", "spam", "StanHeaders", "stringi", "stringr", "tibble"))
install.packages("~/桌面/MatrixModels_0.4-1.tar.gz", repos = NULL, type = "source")
library("Matrix", lib.loc="/usr/lib/R/library")
install.packages("Matrix")
install.packages("lattice")
install.packages("Matrix")
install.packages("~/桌面/MatrixModels_0.4-1.tar.gz", repos = NULL, type = "source")
install.packages("MCMCpack")
rm(list = ls())
library('MCMCpack')
# setwd('/home/zheqng/function simulat')
setwd('/home/zheqng/src/my-RJMCMC-matlab/large K/function simulation/')
these = read.table(file='/home/zheqng/src/my-RJMCMC-matlab/large K/function simulation/theta.txt')
# setwd('/media/zheqng/Seagate Backup Plus Drive/zheqng@nwu/src/RJMCMC-my-C/simu1/2019.2.10/function simulation/')
library("MASS")
source('basicfunc.r')
source('plot.mix.r')
K=7
theta = vector("list",K)
# for(k in 1:100){
PI  = rep(1/K,1,K);
for(k in 1:K){
theta[[k]]$w=these[k,1]
theta[[k]]$v=these[k,2]
theta[[k]]$sigma2=these[k,3]
theta[[k]]$pi = PI[k]
}
# label = rmultinom(n=1,size=M,prob=PI)
z=NULL
for(k in 1:K)z =c(z, rep(k,2))
M = K*4
dat =vector( "list", M)
x=seq(from=-4,to=4,length.out = 50)
for(i in 1:M)
dat[[i]]$x = x;
dat$M=M
for(m in 1:M)
{
k=z[m]
dat[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
dat[[m]]$k=k;
dat[[m]]$x = (dat[[m]]$x)
# /8*0.01
}
m
z
z=NULL
for(k in 1:K)z =c(z, rep(k,2))
theta
theta
rm(list = ls())
library('MCMCpack')
# setwd('/home/zheqng/function simulat')
setwd('/home/zheqng/src/my-RJMCMC-matlab/large K/function simulation/')
these = read.table(file='/home/zheqng/src/my-RJMCMC-matlab/large K/function simulation/theta.txt')
# setwd('/media/zheqng/Seagate Backup Plus Drive/zheqng@nwu/src/RJMCMC-my-C/simu1/2019.2.10/function simulation/')
library("MASS")
source('basicfunc.r')
source('plot.mix.r')
K=7
theta = vector("list",K)
# for(k in 1:100){
PI  = rep(1/K,1,K);
for(k in 1:K){
theta[[k]]$w=these[k,1]
theta[[k]]$v=these[k,2]
theta[[k]]$sigma2=these[k,3]
theta[[k]]$pi = PI[k]
}
# label = rmultinom(n=1,size=M,prob=PI)
z=NULL
for(k in 1:K)z =c(z, rep(k,2))
M = K*4
dat =vector( "list", M)
x=seq(from=-4,to=4,length.out = 50)
for(i in 1:M)
dat[[i]]$x = x;
dat$M=M
# curves.left=seq(1,M,by=1)
# z=rep(0,1,M)
# for(k in 1:K){
#   curves.choose=sample(curves.left,label[k])
#   z[curves.choose]=k
#   curves.left = curves.left[-pmatch(curves.choose,curves.left)]
# }
for(m in 1:M)
{
k=z[m]
dat[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
dat[[m]]$k=k;
dat[[m]]$x = (dat[[m]]$x)
# /8*0.01
}
m
m=1
z
z[1]
z
z[1]
z[2]
length(z)
